name: üöÄ Deploy to Staging

on:
  push:
    branches: [staging]

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  deploy:
    needs: detect
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      ### -------- Build frontend --------
      - name: Setup Node (for frontend)
        if: needs.detect.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Cache npm dependencies
        if: needs.detect.outputs.frontend == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Debug - Check environment variables
        if: needs.detect.outputs.frontend == 'true'
        env:
          VITE_PUSHER_APP_KEY: ${{ secrets.VITE_PUSHER_APP_KEY }}
          VITE_PUSHER_APP_CLUSTER: ${{ secrets.VITE_PUSHER_APP_CLUSTER }}
        run: |
          echo "Checking if secrets are set..."
          if [ -z "$VITE_PUSHER_APP_KEY" ]; then
            echo "‚ùå VITE_PUSHER_APP_KEY is NOT set!"
          else
            echo "‚úÖ VITE_PUSHER_APP_KEY is set (length: ${#VITE_PUSHER_APP_KEY} chars)"
          fi
          
          if [ -z "$VITE_PUSHER_APP_CLUSTER" ]; then
            echo "‚ùå VITE_PUSHER_APP_CLUSTER is NOT set!"
          else
            echo "‚úÖ VITE_PUSHER_APP_CLUSTER is set: $VITE_PUSHER_APP_CLUSTER"
          fi

      - name: Install & build frontend
        if: needs.detect.outputs.frontend == 'true'
        env:
          VITE_SECRET_KEY: ${{ secrets.VITE_SECRET_KEY }}
          VITE_PUSHER_APP_KEY: ${{ secrets.VITE_PUSHER_APP_KEY }}
          VITE_PUSHER_APP_CLUSTER: ${{ secrets.VITE_PUSHER_APP_CLUSTER }}
          VITE_PUSHER_PORT: ${{ secrets.VITE_PUSHER_PORT }}
          VITE_PUSHER_SCHEME: ${{ secrets.VITE_PUSHER_SCHEME }}
        run: |
          cd frontend
          npm ci
          echo "Building with Vite..."
          npm run build

      - name: Verify frontend build output
        if: needs.detect.outputs.frontend == 'true'
        run: ls -l ./frontend/dist

      - name: Debug - Check if Pusher key in build
        if: needs.detect.outputs.frontend == 'true'
        run: |
          echo "Checking if Pusher configuration is in the built files..."
          cd frontend/dist
          
          # Check if any JS files exist
          if ls assets/*.js 1> /dev/null 2>&1; then
            echo "‚úÖ JavaScript files found in build"
            
            # Check for Pusher references (don't print actual keys)
            if grep -l "pusher" assets/*.js > /dev/null 2>&1; then
              echo "‚úÖ Pusher references found in build"
            else
              echo "‚ùå WARNING: No Pusher references found in build!"
            fi
            
            # Check for cluster config
            if grep -l "cluster" assets/*.js > /dev/null 2>&1; then
              echo "‚úÖ Cluster configuration found in build"
            else
              echo "‚ùå WARNING: No cluster configuration found!"
            fi
          else
            echo "‚ùå ERROR: No JavaScript files found in build!"
            exit 1
          fi

      - name: Deploy frontend to staging
        if: needs.detect.outputs.frontend == 'true'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          local-dir: ./frontend/dist/
          server-dir: ./staging/
          exclude: |
You
9:08‚ÄØAM
Run echo "Checking if secrets are set..."
Checking if secrets are set...
‚úÖ VITE_PUSHER_APP_KEY is set (length: 20 chars)
‚úÖ VITE_PUSHER_APP_CLUSTER is set: ***
19s
Run cd frontend
  
npm warn deprecated rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported
npm warn deprecated lodash.isequal@4.5.0: This package is deprecated. Use require('node:util').isDeepStrictEqual instead.
npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated fstream@1.0.12: This package is no longer supported.
added 425 packages, and audited 426 packages in 6s
56 packages are looking for funding
  run `npm fund` for details
2 vulnerabilities (1 low, 1 high)
To address all issues, run:
  npm audit fix
Run `npm audit` for details.
Building with Vite...
> frontend@0.0.0 build
> vite build
vite v7.1.3 building for production...
transforming...
‚úì 2148 modules transformed.
rendering chunks...
computing gzip size...
dist/index.html                             0.49 kB ‚îÇ gzip:     0.33 kB
dist/assets/st-paul-logo-CTkYUup1.webp     54.27 kB
dist/assets/index-BHn9Retv.css             73.46 kB ‚îÇ gzip:    12.59 kB
dist/assets/index-KviK1u1a.js           3,514.52 kB ‚îÇ gzip: 1,080.03 kB

(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: ***://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
‚úì built in 11.99s
0s
Run ls -l ./frontend/dist
total 12
drwxr-xr-x 2 runner runner 4096 Oct  6 01:03 assets
-rw-r--r-- 1 runner runner  494 Oct  6 01:03 index.html
-rw-r--r-- 1 runner runner 1497 Oct  6 01:03 vite.svg
0s
Run echo "Checking if Pusher configuration is in the built files..."
Checking if Pusher configuration is in the built files...
‚úÖ JavaScript files found in build
‚úÖ Pusher references found in build
‚úÖ Cluster configuration found in build
6s
Run SamKirkland/FTP-Deploy-Action@v4.3.6
----------------------------------------------------------------
üöÄ Thanks for using ftp-deploy. Let's deploy some stuff!   
----------------------------------------------------------------
If you found this project helpful, please support it
by giving it a ‚≠ê on Github --> ***://github.com/SamKirkland/FTP-Deploy-Action
or add a badge üè∑Ô∏è to your projects readme --> ***://github.com/SamKirkland/FTP-Deploy-Action#badge
----------------------------------------------------------------
Last published on üìÖ Monday, October 6, 2025 at 12:28 AM
----------------------------------------------------------------
Local Files:	6
Server Files:	6
----------------------------------------------------------------
Calculating differences between client & server
----------------------------------------------------------------
‚öñÔ∏è  File content is the same, doing nothing: assets/index-BHn9Retv.css
‚öñÔ∏è  File content is the same, doing nothing: assets/index-KviK1u1a.js
‚öñÔ∏è  File content is the same, doing nothing: assets/st-paul-logo-CTkYUup1.webp
‚öñÔ∏è  File content is the same, doing nothing: index.html
‚öñÔ∏è  File content is the same, doing nothing: vite.svg
----------------------------------------------------------------
Making changes to 0 files/folders to sync server state
Uploading: 0 B -- Deleting: 0 B -- Replacing: 0 B
----------------------------------------------------------------
----------------------------------------------------------------
üéâ Sync complete. Saving current server state to "./staging/.ftp-deploy-sync-state.json"
----------------------------------------------------------------
Time spent hashing: 15 milliseconds
Time spent connecting to server: 2.8 seconds
Time spent deploying: 986
Milven Albia
9:22‚ÄØAM
name: üöÄ Deploy to Staging

on:
  push:
    branches: [staging]

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  deploy:
    needs: detect
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      ### -------- Build frontend --------
      - name: Setup Node (for frontend)
        if: needs.detect.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Install & build frontend
        if: needs.detect.outputs.frontend == 'true'
        env:
          VITE_SECRET_KEY: ${{ secrets.VITE_SECRET_KEY }}
          VITE_PUSHER_APP_KEY: ${{ secrets.VITE_PUSHER_APP_KEY }}
          VITE_PUSHER_APP_CLUSTER: ${{ secrets.VITE_PUSHER_APP_CLUSTER }}
          VITE_PUSHER_PORT: ${{ secrets.VITE_PUSHER_PORT }}
          VITE_PUSHER_SCHEME: ${{ secrets.VITE_PUSHER_SCHEME }}
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Verify frontend build output
        if: needs.detect.outputs.frontend == 'true'
        run: ls -l ./frontend/dist

      - name: Deploy frontend to staging
        if: needs.detect.outputs.frontend == 'true'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          local-dir: ./frontend/dist/
          server-dir: ./staging/
          exclude: |
            **/.git*
            **/.github*

      ### -------- Deploy backend --------
      - name: Deploy backend to staging
        if: needs.detect.outputs.backend == 'true'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          local-dir: ./backend/
          server-dir: ./staging/api/
          exclude: |
            **/.git*
            **/.github*